name: Release Draft
run-name: Release Draft ${{ github.ref_name }}

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  android:
    name: Android (APK & AAB)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK (release, split per ABI) and AAB
        run: |
          flutter build apk --release --split-per-abi
          flutter build appbundle --release
      - name: Rename Android artifacts
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME#v}"
          mkdir -p release
          cp build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk "release/TPhotos-${VERSION}-android-arm32v7.apk"
          cp build/app/outputs/flutter-apk/app-arm64-v8a-release.apk "release/TPhotos-${VERSION}-android-arm64v8.apk"
          cp build/app/outputs/flutter-apk/app-x86_64-release.apk "release/TPhotos-${VERSION}-android-x64.apk"
          cp build/app/outputs/bundle/release/app-release.aab "release/TPhotos-${VERSION}-android-google-play.aab"
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: |
            release/*.apk
            release/*.aab

  ios:
    name: iOS (no codesign)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS (release, no codesign)
        run: flutter build ios --release --no-codesign

      - name: Archive iOS .app
        run: |
          APP_DIR="build/ios/iphoneos"
          APP_PATH=$(ls -d ${APP_DIR}/*.app | head -n 1)
          if [ -z "$APP_PATH" ]; then echo "No .app found in ${APP_DIR}" && ls -la ${APP_DIR} && exit 1; fi
          cd "$(dirname "$APP_PATH")"
          zip -yr ../../ios-release.zip "$(basename "$APP_PATH")"

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: build/ios-release.zip

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
        shell: pwsh

      - name: Install dependencies
        run: flutter pub get
        shell: pwsh

      - name: Build Windows (release)
        run: flutter build windows --release
        shell: pwsh

      - name: Install Inno Setup
        run: |
          choco install innosetup
        shell: pwsh

      - name: Archive and rename Windows build
        run: |
          $ErrorActionPreference = "Stop"
          $outDir = "build/windows/x64/runner/Release"
          if (-not (Test-Path $outDir)) { Get-ChildItem -Recurse build/windows | Write-Output; throw "Output dir not found" }
          $version = $env:GITHUB_REF_NAME -replace '^v',''
          $zipName = "TPhotos-$version-windows-x86-64.zip"
          Compress-Archive -Path "$outDir/*" -DestinationPath $zipName
        shell: pwsh

      - name: Create Windows Installer (EXE)
        run: |
          $ErrorActionPreference = "Stop"
          $version = $env:GITHUB_REF_NAME -replace '^v',''
          $outDir = "build/windows/x64/runner/Release"
          # Run Inno Setup Compiler
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /DAppVersion=$version /DSourceDir=$outDir inno-setup.iss
          # Rename output EXE
          Move-Item "Output\TPhotos-$version-setup.exe" "TPhotos-$version-windows-x86-64.exe"
        shell: pwsh

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            TPhotos-*-windows-x86-64.zip
            TPhotos-*-windows-x86-64.exe

  macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS (release)
        run: flutter build macos --release

      - name: Create DMG
        run: |
          set -e
          OUT_DIR="build/macos/Build/Products/Release"
          APP_PATH=$(ls -d ${OUT_DIR}/*.app | head -n 1)
          if [ -z "$APP_PATH" ]; then echo "No .app found in ${OUT_DIR}" && ls -la ${OUT_DIR} && exit 1; fi
          VERSION="${GITHUB_REF_NAME#v}"
          DMG_NAME="TPhotos-${VERSION}.dmg"
          hdiutil create -volname "tphotos" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_NAME"
          mkdir -p build
          mv "$DMG_NAME" build/

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: build/tphotos-*.dmg

  linux:
    name: Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Install Linux desktop deps
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop
      - name: Install dependencies
        run: flutter pub get
      - name: Build Linux (release)
        run: flutter build linux --release
      - name: Pack Linux tar.gz
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME#v}"
          BUNDLE="build/linux/x64/release/bundle"
          if [ ! -d "$BUNDLE" ]; then echo "Bundle not found"; ls -R build/linux; exit 1; fi
          tar czf "TPhotos-${VERSION}-linux-x86_64.tar.gz" -C "$BUNDLE" .
      - name: Create AppImage
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME#v}"
          BUNDLE="build/linux/x64/release/bundle"
          APPIMAGE_NAME="TPhotos-${VERSION}-linux-x86_64.AppImage"
          # Install appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          TOOL="./appimagetool-x86_64.AppImage"
          # Create AppDir structure
          mkdir -p AppDir/usr/bin AppDir/usr/lib AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          cp -r "$BUNDLE"/* AppDir/usr/bin/
          # Add desktop file and icon (assume icon exists in project)
          echo "[Desktop Entry]\nName=TPhotos\nExec=TPhotos\nIcon=tphotos\nType=Application\nCategories=Utility;" > AppDir/usr/share/applications/tphotos.desktop
          cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/tphotos.png  # Adjust path if needed
          # Create AppImage
          $TOOL AppDir "$APPIMAGE_NAME"
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: |
            TPhotos-*-linux-x86_64.tar.gz
            TPhotos-*-linux-x86_64.AppImage

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [android, ios, macos, windows, linux]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List downloaded files
        run: ls -R dist
      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: true
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            dist/android/*.apk
            dist/android/*.aab
            dist/ios/*.zip
            dist/macos/*.dmg
            dist/windows/*.zip
            dist/windows/*.exe
            dist/linux-*/*.tar.gz
            dist/linux-*/*.AppImage
